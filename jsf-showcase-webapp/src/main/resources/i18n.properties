# These messages can be accessed via EL using the implicit i18n object provided by Liferay Faces Util. When the portlet
# is deployed to any portal, the i18n object can also access messages found in a portlet.xml <resource-bundle> . When
# deployed to Liferay Portal, the i18n object can also access messages found in the portal's Language.properties file.
actionlistener-execution-when-immediate-is-false=ActionListener execution when [vdldoc:h:commandButton:immediate] is `false` (the default)
actionlistener-execution-when-immediate-is-true=ActionListener execution when [vdldoc:h:commandButton:immediate] is `true`
agree=Agree
ajax=Ajax
are-you-sure-you-want-to-delete-this=Are you sure you want to delete this?
alternate-formats=Alternate Formats
answer-at-stackoverflow=answer at stackoverflow
append-new-files-to-preview=Append New Files to Preview
attribute-value=Attribute Value
back-to-navigation-with=Back to Navigation with
birthday=Birthday
block=Block
bottom=Bottom
button=Button
buttonlink=Button/Link
c-choose=The JSF runtime includes [vdldoc:c:choose] implementation of the JSTL `&lt;c:choose&gt;` JSP tag. If JSTL sounds familiar (heavily used in JSP) then, it provides the same features for JSF too.
c-choose-general=Use together with [vdldoc:c:when] and [vdldoc:c:otherwise] to choose which portion of code will be rendered depending in a condition that can be set in `test` attribute from [vdldoc:c:when] tag handler.
c-foreach=[vdldoc:c:forEach] have similar features and attributes than [vdldoc:ui:repeat].
c-foreach-general=
c-if=[vdldoc:c:if] has a similar behavior that [vdldoc:c:choose] does, but just with one condition, instead of having an alternative when the condition set in `test` is not met.
c-if-general=
c-set=[vdldoc:c:set] becomes useful for setting a value to a JavaBean or an scoped variable.
c-set-general=Set `value` for specifying which value you want to set, and then there are two possible options:<ul><li>Store the value in a scoped variable. Set `var`  and `scope` attributes for that purpose.</li><li>Set the value to a JavaBean property. In this case, just use `target` for the bean name, and `property` for the bean property name to be set.</li></ul>
cancel=Cancel
child=Child
choose-files=Choose Files
clear-the-value-of-the-hidden-input=Clear the value of the hidden input
click-here-to-execute-the-click-event-callback=Click here to execute the click event callback
click-here-and-press-the-tab-key=Click here and press the TAB key
click-here-to-show-the-dialog=Click here to show the dialog
click-here-to-show-the-dialog-and-cilck-outside-the-dialog-to-hide=Click here to show the dialog and click outside the dialog to hide
click-here-to-show-the-modal-dialog=Click here to show the modal dialog
click-here-to-show-the-popover=Click here to show the popover
click-here-to-toggle-the-dialog=Click here to toggle the dialog
click-here-to-toggle-the-popover-and-click-outside-the-popover-to-hide=Click here to toggle the popover and click outside the popover to hide
client-filter-type=Client Filter Type
client-side=Client Side
column-width=Column Width
column-offset=Column Offset
collapse-all=Collapse All
copy-1234-to-the-value-of-the-hidden-input=Copy '1234' to the value of the hidden input
copy-a-date-to-the-value-of-the-hidden-input=Copy a date to the value of the hidden input
copy-a-valid-email-address-to-the-hidden-input=Copy a valid email address to the hidden input
copy-an-invalid-email-address-to-the-hidden-input=Copy an invalid email address to the hidden input
complete=Complete
completed-orders=Completed Orders
component=Component
conversion=Conversion
conversion-to-a-date-using-converter-attribute=Conversion to a [javadoc:java.util.Date] using the [vdldoc:h:inputTextarea:converter] attribute
conversion-to-a-date-using-f-convertdatetime=Conversion to a [javadoc:java.util.Date] using an [vdldoc:f:convertDateTime] child tag
converter-message=Failed to convert this field
copy-into-the-hidden-input=Copy into the hidden input
country=Country
custom-filter=Custom Filter
customers=Customers
danger=Danger
data=Data
data-model=Data Model
date-of-birth=Date of Birth
date-pattern=Date Pattern
description=Description
default=Default
default-value=Default Value
delay=Delay
delete=Delete
disable=Disable
disabled=Disabled
dislike=Dislike
drop-down=Dropdown
dynamic-tabs=Dynamic Tabs
edit=Edit
email=Email
email-is-not-valid=Email is not valid
enable=Enable
enter-your-search-here=Enter your search here
error=Error
event=Event
example=Example
expand-all=Expand All
extensions=Extensions
f-ajax=Since JSF 2.0, includes the [vdldoc:f:ajax] Facelet [javadoc:javax.faces.view.facelets.TagHandler]. This [javadoc:javax.faces.component.behavior.ClientBehavior] adds AJAX features to any [javadoc:javax.faces.component.behavior.ClientBehaviorHolder] that implements `addClientBehavior`.
f-ajax-general=By default (no `listener` specified), AJAX request is made when the default event (obtained from [javadoc:javax.faces.component.behavior.ClientBehaviorHolder] and method `getDefaultEventName`) had been thrown.
f-ajax-listener=If `listener` is specified, then that method is executed when the default event (obtained from [javadoc:javax.faces.component.behavior.ClientBehaviorHolder] and method `getDefaultEventName`) occurs. This is a good practice for unifying AJAX calls and decoupling from the parent component.
f-ajax-event=It's possible to specify the events which will throw AJAX invocation. This is possible using `event` attribute.
f-attribute=This element lets to store some key-value attributes to any [javadoc:javax.faces.component.UIComponent].
f-attribute-general=It is possible to access those attributes through [javadoc:javax.faces.component.UIComponent] and `getAttributes` method.
f-attributes=Same as the [vdldoc:f:attribute] component, you can have multiple key-values asociated to a single component, but those can be declared as an EL expression.
f-attributes-general=You can declare the attributes key-values using `value` attribute. This method can return a Map&lt;String, Object&gt; with those attributes. 
f-convertdatetime=The [vdldoc:f:convertDateTime] Facelet tag exposes the functionality of a [javadoc:javax.faces.convert.DateTimeConverter] inside Facelet views.
f-convertdatetime-general=A *custom converter pattern* can be specified via the [vdldoc:f:convertDateTime:pattern] attribute. The syntax of the pattern follows the format specified by [javadoc:java.text.SimpleDateFormat].
f-converter=The [vdldoc:f:converter] Facelet tag exposes the functionality of a [javadoc:javax.faces.convert.Converter] inside Facelet views. `f:converter` tags facilitate conversion of complex data structures into UI data and back.
f-converter-general=Converters must be annotated with @[javadoc:javax.faces.convert.FacesConverter] (or declared as a converter in a `faces-config.xml` file) and implement [javadoc:javax.faces.convert.Converter] in order to be accessible via the `f:converter` tag.
f-convertnumber=The [vdldoc:f:convertNumber] Facelet tag exposes the functionality of a [javadoc:javax.faces.convert.NumberConverter] inside Facelet views.
f-convertnumber-general=The [vdldoc:f:convertNumber:type] attribute can be set to `"currency"`, `"number"`, or `"percent"` in order to convert different types of numbers.
f-event=It's possible to attach event listeners to [javadoc:javax.faces.component.UIComponent] events, like `preRenderComponent` or `preRenderView` in [vdldoc:f:event].
f-event-general=Just implement a method passing a [javadoc:javax.faces.event.ComponentSystemEvent] parameter and it will be invoked whenever that event occurs. To see the possible values of `type`, just see [vdldoc:f:event] VDL.
f-facet=This Facelet makes possible to add a named [javadoc:javax.faces.component.UIComponent] nested to another. This way, developers can freely implement a more complex Facelet component than a simple attribute does.
f-facet-general=[vdldoc:f:facet] is used in [javadoc:javax.faces.component.UIData] (used by some components like [vdldoc:h:dataTable]) and by [vdldoc:h:column]. For custom developments, there are some methods available in  [javadoc:javax.faces.component.UIComponentBase] for obtaining those.
f-loadbundle=[vdldoc:f:loadBundle] brings the possibility of loading a [javadoc:java.util.ResourceBundle] into a request scope variable for later use, using the current view Locale.
f-loadbundle-general=Use `var`attribute to specify the request scoped variable name. In `basename` is possible to set the file name, using the same path as if using [javadoc:java.util.ResourceBundle] `getBundle` method. 
f-metadata=Something similar as [vdldoc:f:facet], it's possible to declare metadata for an entire JSF view in [vdldoc:f:metadata] Facelet.
f-metadata-general=
f-metadata-content=This tag needs other nested components as metadata. Please visit the f:viewAction or f:viewParam for examples.
f-param=[vdldoc:f:param] Facelet sends a named parameter value if used in any commandButton, commandLink, outputLink or button. These parameters will be sent as form parameters when doing the POST/GET requests. In order to get them, you can use [javadoc:javax.faces.context.ExternalContext] `getRequestParameterMap` method for getting the sent value.<br/><br/>It's important to *notice the differences* between [vdldoc:f:param] and [vdldoc:f:attribute]:<ul><li>`f:attribute` stores the key-values in the component itself, so, in order to get those attributes, the reference to the UIComponent should be available. For getting the f:param values is enough to use the `getRequestParameterMap` method mentioned before.</li><li>f:param should be used for sending `String` parameter values. If it's intented to use `Object`, then use f:attribute instead</li></ul>
f-param-general=
f-passthroughattribute=Thanks to [vdldoc:f:passThroughAttribute] (since JSF 2.2) it's possible to specify custom values for HTML attributes that doesn't exist in the tag where it is used.
f-passthroughattribute-general=For this example, you will need an HTML5 capable browser. We are using a known HTML5 attribute for input elements, which will let us to render a number spinner using the native feature in browser.
f-passthroughattributes=[vdldoc:f:passThroughAttributes] provides the same behaviour as [vdldoc:f:passThroughAttribute] but for multiple attributes at the same time. 
f-passthroughattributes-general=For populating the attribute values, just set `value` EL expression. This should return a `Map&lt;String,Object&gt` with the key being the attribute name, and its value the correspondent attribute value.
f-phaselistener=[vdldoc:f:phaseListener] enables the possibility of adding a [javadoc:javax.faces.event.PhaseListener] as part of the [javadoc:javax.faces.component.UIViewRoot]. Notice that this method differs from the `faces-config.xml` method as the latter applies from the beginning, and this only applies when the tag is being rendered.
f-phaselistener-general=Use `type` for setting the class name that implements [javadoc:javax.faces.event.PhaseListener], or use `binding` to use an EL expression that evaluates to a [javadoc:javax.faces.event.PhaseListener]. In the example below, you can see that more phases apply from PhaseListener when doing the postback, as at that moment the tag was applied and PhaseListener ready.
f-resetvalues=[vdldoc:f:resetValues] appeared since JSF 2.2 to fix a behavior that could appear <a href="https://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1129" target="_blank">under some conditions</a> that caused some UI components to not reflect the real bean state. This Facelet can be used for non-AJAX request, if using f:ajax, just use [vdldoc:f:ajax] `resetValues` attribute.
f-resetvalues-general=Use `for` to configure which single component value you want to be reset for avoiding behavior mentioned above. Use `render` to add a list of *clientId (not id as usual)* to which the values would be reset. *Important note:* this attribute doesn't support any word for some scopes like @form, so you should add each of them. To check this behavior, follow these steps:<ul><li>Add some text in one of the fields below, then click on the Submit button</li><li>A validation error will show up. This is expected behavior at this point.</li><li>Now click on Reset. `actionListener` is invoked and resets both fields, so the inputText should be empty after this request, which wouldn't be true if [vdldoc:f:resetValues] was not used.
f-selectitem=This component can be used as a children element of any [javadoc:javax.faces.component.UISelectOne] or [javadoc:javax.faces.component.UISelectOne] to declare the possible options of the element value.
f-selectitem-general=In [vdldoc:f:selectItem], use `itemLabel` for the text that will be visible to users, and `itemValue` for the value that will be set if that option was chosen. `itemDescription` is used as documentation purposes (for development tools). `noSelectionOption` is used for some failed validations. Use `value` to use a programmatic [javadoc:javax.faces.component.UISelectItem] through an evaluated EL expression. 
f-selectitems=This [vdldoc:f:selectItems] Facelet lets developers to add a [javadoc:java.util.Collection], [javadoc:java.util.Map] or an array of [javadoc:javax.faces.model.SelectItem] to have more programmatic control over the generated items.
f-selectitems-general=This component can be added together with other [vdldoc:f:selectItem].
f-setpropertyactionlistener=[vdldoc:f:setPropertyActionListener] makes it easier to do a common task in JSF application development: set a value when executing an [javadoc:javax.faces.component.UICommand].
f-setpropertyactionlistener-general=To set the target [javadoc:javax.faces.component.UIComponent] implementing [javadoc:javax.faces.component.ActionSource], use `for` attribute (this can be avoided if nested to another UICommand Facelet element). For specifying the bean value to be set, use `target` attribute, and use `value` for getting the same that will be used into `target`. This Facelet will then add a new dynamic [javadoc:javax.faces.event.ActionListener] to the parent component (or the one set in `for`attribute). This ActionListener will set the `target` value obtained from `value` expression. 
f-validatebean=The [vdldoc:f:validateBean] Facelet tag takes advantage of <a href="https://docs.oracle.com/javaee/6/tutorial/doc/gircz.html" target="_blank">Bean Validation annotations</a> on Java Bean properties.
f-validatebean-general=
f-validatedoublerange=The [vdldoc:f:validateDoubleRange] Facelet tag exposes the functionality of a [javadoc:javax.faces.validator.DoubleRangeValidator] inside Facelet views.
f-validatedoublerange-general=The [vdldoc:f:validateDoubleRange:minimum] and [vdldoc:f:validateDoubleRange:maximum] attributes can be used to specify the range limits for a floating point value.
f-validatedoublerange-label=Validate Double Range field
f-validatelength=The [vdldoc:f:validateLength] Facelet tag exposes the functionality of a [javadoc:javax.faces.validator.LengthValidator] inside Facelet views.
f-validatelength-general=The [vdldoc:f:validateLength:minimum] and [vdldoc:f:validateLength:maximum] attributes can be used to specify the length limits for an input value.
f-validatelength-label=Validate length field
f-validatelongrange=The [vdldoc:f:validateLongRange] Facelet tag exposes the functionality of a [javadoc:javax.faces.validator.LongRangeValidator] inside Facelet views.
f-validatelongrange-general=The [vdldoc:f:validateLongRange:minimum] and [vdldoc:f:validateLongRange:maximum] attributes can be used to specify the range limits for an integer value.
f-validatelongrange-label=Validate Long Range field
f-validateregex=The [vdldoc:f:validateRegex] Facelet tag exposes the functionality of a [javadoc:javax.faces.validator.RegexValidator] inside Facelet views.
f-validateregex-general=The [vdldoc:f:validateRegex:pattern] attribute can be used to specify a regular expression validation pattern for an input value.
f-validaterequired=The [vdldoc:f:validateRequired] Facelet tag can be used to require a value from a [javadoc:javax.faces.component.UIInput] Component. `f:validateRequired` activates the same validation logic as [vdldoc:h:inputText:required]="true" and [javadoc:javax.faces.component.UIInput].setRequired(true).
f-validaterequired-general=
f-validaterequired-label=Required field
f-validator=The [vdldoc:f:validator] Facelet tag exposes the functionality of a [javadoc:javax.faces.validator.Validator] inside Facelet views. `f:validator` tags facilitate validation of complex data structures.
f-validator-general=Validators must be annotated with @[javadoc:javax.faces.validator.FacesValidator] (or declared as a validator in a `faces-config.xml` file) and implement [javadoc:javax.faces.validator.Validator] in order to be accessible via the `f:validator` tag.
f-validator-label=Custom validator field
f-valuechangelistener=It's easy to implement a custom [javadoc:javax.faces.event.ValueChangeListener] and use it in any [javadoc:javax.faces.component.EditableValueHolder] Facelet component.
f-valuechangelistener-general=Set `type` attribute with a fully qualified Java class name implementing [javadoc:javax.faces.event.ValueChangeListener] to be applied when the parent [javadoc:javax.faces.component.EditableValueHolder] value changes. <strong>Important note:</strong> there is usually confusion about ValueChangeListener and client-side events. ValueChangeListener are only server-side related events. For using client-side ones, just use any of the provided mechanism (`f:ajax` with `event` attribute, etc).
f-view=[vdldoc:f:view] declares the beginning of a JSF page.
f-view-general=This tag provides some attributes for page customization, such as `contentType`, `encoding` or `locale`. Since <strong>JSF 2.2</strong> it is possible to make a page `transient` by setting this attribute to `true`. This means that the page state isn't stored anymore, hence causing all @ViewScoped managed beans to not maintain their state, but saving memory.
f-viewaction=Since JSF 2.2, you can invoke an `action` or `actionListener`, passing through the JSF phases using [vdldoc:f:viewAction].
f-viewaction-general=It's possible to choose this method to be executed during non-JSF request (GET) or in a postBack, using `postBack` attribute. Another useful attribute could be `phase`, as there you can specify which JSF [javadoc:javax.faces.event.PhaseId] you want that method to be invoked on.
f-viewparam=[vdldoc:f:viewParam] lets JSF developer to process a parameter in the current view. As it behaves like [vdldoc:f:param], it supports other interesting features like using `Converter` or `Validator`.
f-viewparam-general=Click on the link to see how the viewParam populates the backing bean value converted through `CountryConverter`.
facescore=Faces Core
facelets=Facelets
favorite-liferay-benefit=Favorite Liferay Benefit
field-label=Field Label
fieldset-legend=Fieldset Legend
filter=Filter
first=First
first-name=First Name
flash-player=Flash Player
form-action-attribute-view-params-description=The `action` attribute of the rendered `&lt;form&gt;` (shown below) contains view parameters in the query-string.
footer=Footer
highlighter=Highlighter
highlighter-type=Highlighter Type
general=General
graceful-degradation=Graceful Degradation
h-body=[javadoc:javax.faces.component.html.HtmlBody] is a [javadoc:javax.faces.component.UIOutput] that renders a `&lt;body&gt;` element for webapps and a `&lt;div&gt;` for portlets.
h-body-general=The usage of [vdldoc:h:body] in webapps is the same as with portlets. However, the surrounding tag in a webapp is `&lt;html&gt;` whereas the surrounding tag in a portlet is [vdldoc:f:view].
h-button=[javadoc:javax.faces.component.html.HtmlOutcomeTargetButton] is a [javadoc:javax.faces.component.UIOutput] component that renders a styleable HTML `&lt;input&gt;` element. The default [vdldoc:h:button:type] is `button`. The component does *not need to be a child* of `h:form` since the [vdldoc:h:button:outcome] attribute is designed to navigate via HTTP GET.
h-button-general=The [vdldoc:h:button:image] and [vdldoc:h:button:value] attributes can be specified for styling purposes.
h-button-general-example-1=Styling via [vdldoc:h:button:image] attribute
h-button-general-example-2=Styling via [vdldoc:h:button:value] attribute
h-button-navigation=The component can be used to *navigate* between pages with the [vdldoc:h:button:outcome] attribute. Setting [vdldoc:h:button:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
h-button-param=URL *parameters* can be specified via [vdldoc:f:param] child tags. Setting [vdldoc:h:button:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
h-button-various-styles=The component can be *styled* with Bootstrap class names as described in the <a href="http://liferay.github.io/alloy-bootstrap/base-css.html#buttons" target="_blank">Alloy Base CSS</a> documentation.
h-commandbutton=[javadoc:javax.faces.component.html.HtmlCommandButton] is a [javadoc:javax.faces.component.UICommand] component that renders a styleable HTML `&lt;input&gt;` element. The default [vdldoc:h:commandButton:type] is `submit`. The component *must be a child* of [vdldoc:h:form] in order to trigger the [vdldoc:h:commandButton:action] or [vdldoc:h:commandButton:actionListener].
h-commandbutton-general=*Children* such as [vdldoc:h:icon], [vdldoc:h:outputText], and [vdldoc:h:graphicImage] can be specified for styling purposes. Alternatively, the [vdldoc:h:commandButton:image] and [vdldoc:h:commandButton:value] attributes can be specified for styling purposes.
h-commandbutton-general-example-1=Styling via [vdldoc:h:commandButton:image] attribute
h-commandbutton-general-example-2=Styling via [vdldoc:h:commandButton:value] attribute
h-commandbutton-immediate=When the [vdldoc:h:commandButton:immediate] attribute is `true`, the [vdldoc:h:commandButton:action] and [vdldoc:h:commandButton:actionListener] callbacks execute during the *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal INVOKE_APPLICATION phase.
h-commandbutton-navigation=The component can be used to *navigate* between pages with the [vdldoc:h:commandbutton:action] attribute. By specifying a `&lt;redirect&gt;` element in the `navigation-rule`, it will utilize the POST/REDIRECT/GET pattern.
h-commandbutton-param=URL *parameters* can be specified via the [vdldoc:h:commandbutton:action] attribute. By specifying a `faces-redirect=true` parameter in the action attribute, it will utilize the POST/REDIRECT/GET pattern.
h-commandbutton-value-attribute=Although the component&apos;s [vdldoc:h:commandButton:value] attribute is *read-only* (can&apos;t be changed via form submission), it can be used to determine that an item has been selected by the user.
h-commandbutton-various-styles=The component can be *styled* with Bootstrap class names as described in the <a href="http://liferay.github.io/alloy-bootstrap/base-css.html#buttons" target="_blank">Alloy Base CSS</a> documentation.
h-commandlink=[javadoc:javax.faces.component.html.HtmlCommandLink] is a [javadoc:javax.faces.component.UICommand] component that renders an `&lt;a&gt;` element. The component *must be a child* of [vdldoc:h:form] in order to trigger the [vdldoc:h:commandLink:action] or [vdldoc:h:commandLink:actionListener].
h-commandlink-general=*Children* such as [vdldoc:h:icon], [vdldoc:h:outputText], and [vdldoc:h:graphicImage] can be specified for visual purposes. Alternatively, the [vdldoc:h:commandLink:value] attribute can be specified.
h-commandlink-general-example-1=Styling via children
h-commandlink-general-example-2=Styling via [vdldoc:h:commandButton:value] attribute
h-commandlink-immediate=When the [vdldoc:h:commandLink:immediate] attribute is `true`, the [vdldoc:h:commandLink:action] and [vdldoc:h:commandLink:actionListener] callbacks execute during the *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal INVOKE_APPLICATION phase.
h-commandlink-navigation=The component can be used to *navigate* between pages with the [vdldoc:h:commandLink:action] attribute. By specifying a `&lt;redirect&gt;` element in the `navigation-rule`, it will utilize the POST/REDIRECT/GET pattern.
h-commandlink-param=URL *parameters* can be specified via the [vdldoc:h:commandLink:action] attribute. By specifying a `faces-redirect=true` parameter in the action attribute, it will utilize the POST/REDIRECT/GET pattern.
h-commandlink-value-attribute=Although the component&apos;s [vdldoc:h:commandLink:value] attribute is *read-only* (can&apos;t be changed via form submission), it can be used to determine that an item has been selected by the user.
h-datatable=[javadoc:javax.faces.component.html.HtmlDataTable] is a [javadoc:javax.faces.component.UIData] (iterator) component that renders a `table` element with tabular data and is designed to be used in conjunction with [vdldoc:h:column] child component tags.
h-datatable-general=The [vdldoc:h:dataTable:value] attribute tag must be bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:h:dataTable:var] attribute is used to introduce a variable name into the EL when iterating over the model.
h-form=[javadoc:javax.faces.component.html.HtmlForm] is a [javadoc:javax.faces.component.UIForm] component that renders a `&lt;form&gt;` element.
h-form-general=In order to submit a form via Ajax, it is necessary to specify an [vdldoc:f:ajax] child tag inside of [vdldoc:h:commandButton] or [vdldoc:h:commandLink].
h-form-non-ajax=When an [vdldoc:h:form] is submitted via [vdldoc:h:commandButton] or [vdldoc:h:commandLink] it is submitted as a full-page postback by default.
h-form-view-params= View Parameters can be automatically included in full-page postbacks by setting [vdldoc:h:form:includeViewParams]=`true`.
h-head=[javadoc:javax.faces.component.html.HtmlHead] is a [javadoc:javax.faces.component.UIOutput] that renders a `&lt;head&gt;` element for webapps, but not for portlets. *In the case of portlets,* the presence of [vdldoc:h:head] informs the JSF portlet bridge that JSF resources with `target="head"` should be included in the `&lt;head&gt;` element rendered by the portal.
h-head-general=The usage of [vdldoc:h:head] in webapps is the same as with portlets. However, the surrounding tag in a webapp is `&lt;html&gt;` whereas the surrounding tag in a portlet is [vdldoc:f:view].
h-graphicimage=[javadoc:javax.faces.component.html.HtmlImage] is a [javadoc:javax.faces.component.UIGraphic] component that renders an `&lt;img&gt;` element.
h-graphicimage-general=The [vdldoc:h:image:value] attribute can be *bound to a model bean property* via EL, bound to a JSF resource via the `#{resource}` EL keyword, or using the [vdldoc:h:image:library] and [vdldoc:h:image:name] attributes to specify a JSF resource.
h-graphicimage-general-example-1=Context-relative path to a resource via the [vdldoc:h:image:value] attribute
h-graphicimage-general-example-2=JSF resource via the `#{resource}` EL keyword
h-graphicimage-general-example-3=JSF resource via the [vdldoc:h:image:library] and [vdldoc:h:image:name] attributes
h-graphicimage-general-example-4=Clickable areas via the [vdldoc:h:image:usemap] attribute
h-inputfile=[javadoc:javax.faces.component.html.HtmlInputFile] is a [javadoc:javax.faces.component.UIInput] component for JSF 2.2+ that renders an `&lt;input&gt;` element with `type="file"`.
h-inputfile-general=By default, one file can be uploaded as a non-Ajax (full-page) postback.
h-inputhidden=[javadoc:javax.faces.component.html.HtmlInputHidden] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with *type=*`hidden`.
h-inputhidden-validation=The [vdldoc:h:inputHidden:value] attribute can be *validated* via the [vdldoc:h:inputHidden:validator] attribute or by specifying a [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:inputHidden:validatorMessage] attribute.
h-inputhidden-immediate=When the [vdldoc:h:inputHidden:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-inputhidden-conversion=The [vdldoc:h:inputHidden:value] attribute can be *converted* via the [vdldoc:h:inputHidden:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:inputHidden:converterMessage] attribute.
h-inputhidden-general=The [vdldoc:h:inputHidden:value] attribute can be *bound to a model bean property* via EL.
h-inputsecret=[javadoc:javax.faces.component.html.HtmlInputSecret] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with *type=*`password`.
h-inputsecret-general=The [vdldoc:h:inputSecret:value] attribute can be *bound to a model bean property* via EL.
h-inputsecret-immediate=When the [vdldoc:h:inputSecret:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-inputsecret-redisplay=The [vdldoc:h:inputSecret:redisplay] attribute indicates whether or not the [vdldoc:h:inputSecret:value] attribute is rendered to the response. For example, if *redisplay* is `true` then the component would be rendered like the following:<br/><br/><code>&lt;input type="secret" value="myPlainTextPassword" /&gt;</code><br/><br/>Since this is a !potential security risk!, the *default value* of the *redisplay* attribute is `false`. However, this has the side-effect of the user having to re-enter a value when validation fails. In order to provide a better user experience, avoid using [vdldoc:f:ajax:render]=`@form` to update the DOM.
h-inputsecret-redisplay-example-1=Specifying [vdldoc:h:inputSecret:redisplay]=`false` (the default, which is secure) and re-rendering only specific components in the DOM
h-inputsecret-redisplay-example-2=Specifying [vdldoc:h:inputSecret:redisplay]=`true` !(potential security risk)! and re-rendering the entire form in the DOM
h-inputsecret-validation=The [vdldoc:h:inputSecret:value] attribute can be *validated* via the [vdldoc:h:inputSecret:validator] attribute or by specifying a [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:inputSecret:validatorMessage] attribute.
h-inputsourcecode=[javadoc:javax.faces.component.html.HtmlInputSourceCode] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing source code text.
h-inputtext=[javadoc:javax.faces.component.html.HtmlInputText] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing *single-line text*.
h-inputtext-conversion=The [vdldoc:h:inputText:value] attribute can be *converted* via the [vdldoc:h:inputText:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:inputText:converterMessage] attribute.
h-inputtext-general=The [vdldoc:h:inputText:value] attribute can be *bound to a model bean property* via EL.
h-inputtext-immediate=When the [vdldoc:h:inputText:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-inputtext-validation=The [vdldoc:h:inputText:value] attribute can be *validated* via the [vdldoc:h:inputText:validator] attribute or by specifying an [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:inputText:validatorMessage] attribute.
h-inputtextarea=[javadoc:javax.faces.component.html.HtmlInputTextarea] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing *multi-line text*.
h-inputtextarea-conversion=The [vdldoc:h:inputTextarea:value] attribute can be *converted* via the [vdldoc:h:inputTextarea:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:inputTextarea:converterMessage] attribute.
h-inputtextarea-general=The [vdldoc:h:inputTextarea:value] attribute can be *bound to a model bean property* via EL.
h-inputtextarea-immediate=When the [vdldoc:h:inputTextarea:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-inputtextarea-right-to-left=The component supports *Right-To-Left* language input by setting the [vdldoc:h:inputTextarea:dir] and [vdldoc:h:inputTextarea:lang] attributes.
h-inputtextarea-size=The *size* of the rendered textarea can be specified via the [vdldoc:h:inputTextarea:rows] and [vdldoc:h:inputTextarea:cols] attributes, or via CSS using the [vdldoc:h:inputTextarea:styleClass] or [vdldoc:h:inputTextarea:style] attributes.
h-inputtextarea-size-example-1=Setting the size via the [vdldoc:h:inputTextarea:rows] and [vdldoc:h:inputTextarea:cols] attributes
h-inputtextarea-size-example-2=Setting the size via the [vdldoc:h:inputTextarea:style] attribute
h-inputtextarea-validation=The [vdldoc:h:inputTextarea:value] attribute can be *validated* via the [vdldoc:h:inputTextarea:validator] attribute or by specifying an [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:inputTextarea:validatorMessage] attribute.
h-link=[javadoc:javax.faces.component.html.HtmlLink] is a [javadoc:javax.faces.component.UIOutcomeTarget] component that renders an `&lt;a&gt;` element (hyperlink).
h-link-benefits-description=is intended to be used to render a hyperlink that *navigates* to other JSF views via HTTP GET, or perhaps to re-render the same view with different *view parameters* via [vdldoc:f:param] child tags.
h-link-general=The text/content of the hyperlink can be specified via the [vdldoc:h:link:value] of the component or by specifying child components. Setting [vdldoc:h:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
h-link-general-example-1=Specifying hyperlink text via the [vdldoc:h:link:value] attribute
h-link-general-example-2=Specifying children as hyperlink text/content
h-link-navigation=The component can be used to *navigate* between pages with the [vdldoc:h:link:outcome] attribute.  Setting [vdldoc:h:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
h-link-param=URL *parameters* can be specified via [vdldoc:f:param] child tags. Setting [vdldoc:h:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
h-message=[javadoc:javax.faces.component.html.HtmlMessage] is a [javadoc:javax.faces.component.UIMessage] component that renders a `&lt;span&gt;` element containing the text of a single [javadoc:javax.faces.application.FacesMessage] for an associated component.
h-message-general=The component can be *associated* with an input component like [vdldoc:h:inputText] via the [vdldoc:h:message:for] attribute. If it is a child of [vdldoc:h:field] then it will be *automatically styled* when validation fails.
h-message-general-example-1=Re-Rendering [vdldoc:h:message] via [vdldoc:f:ajax]
h-messages=[javadoc:javax.faces.component.html.HtmlMessages] is a [javadoc:javax.faces.component.UIMessages] component that renders the text of one or more [javadoc:javax.faces.application.FacesMessage] instances inside a `&lt;ul&gt;` element or `&lt;table&gt;` element for an associated component, according to the [vdldoc:h:messages:layout] attribute.
h-messages-general=The component is typically placed inside an [vdldoc:h:form] in order to render messages within the context of a form.
h-messages-general-example-1=Render *all* messages in a `&lt;ul&gt;` (the default)
h-messages-general-example-2=Render *all* messages in a `&lt;table&gt;`
h-messages-general-example-3=Render *only global* messages in a `&lt;ul&gt;`
h-outputformat=[javadoc:javax.faces.component.html.HtmlOutputFormat] is a [javadoc:javax.faces.component.UIOutput] component that renders *parameterized* text.
h-outputformat-general=The [vdldoc:h:outputFormat:value] attribute can contain *parameterized text* in the same manner as [javadoc:java.text.MessageFormat] and parameter substitution is accomplished via [vdldoc:f:param] child tags.
h-outputlabel=[javadoc:javax.faces.component.html.HtmlOutputLabel] is a [javadoc:javax.faces.component.UIOutput] component that renders its [vdldoc:h:outputLabel:value] attribute within a `&lt;label&gt;` element.
h-outputlabel-general=The [vdldoc:h:outputLabel:value] attribute can be *bound to a message-bundle property* via EL in order to render internationalized labels.<br/><br/>If the component is *associated* with an input component like [vdldoc:h:inputText] via the [vdldoc:h:outputLabel:for] attribute, then a validation [javadoc:javax.faces.application.FacesMessage] that is queued for the associated component will use the [vdldoc:h:outputLabel:value] of the label. This provides the end-user with a better context as to which input field failed validation.
h-outputlink=[javadoc:javax.faces.component.html.HtmlOutputLink] is a [javadoc:javax.faces.component.UIOutput] component that renders an `&lt;a&gt;` element (hyperlink).
h-outputlink-benefits-description=is intended to be used to render a simple `&lt;a href="..."&gt;hyperlink&lt;/a&gt;` that requests a URL via HTTP GET.
h-outputlink-general=The [vdldoc:h:outputLink:value] of the component is rendered as the `href` attribute and the children of the component are rendered as the text/content of the hyperlink.
h-outputlink-general-example-1=Specifying text for the hyperlink
h-outputlink-general-example-2=Specifying an image for the hyperlink
h-outputlink-general-example-3=Specifying URL parameters with [vdldoc:f:param]
h-outputlink-conversion=The [vdldoc:h:outputLink:value] attribute can be *converted* via the [vdldoc:h:outputLink:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:h:outputLink:converterMessage] attribute.
h-outputscript=[javadoc:javax.faces.component.html.HtmlOutputScript] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;script&gt;` element with `type="text/javascript"`.
h-outputscript-general=The script can be rendered in different *positions* on the page via the [vdldoc:h:outputScript:target] attribute. Valid values include <code>body</code>, <code>form</code>, and <code>head</code>. The default value of this attribute is an empty (null) value which causes the <code>&lt;script&gt;</code> to be rendered inline (corresponding to its position in the view). Specifying <code>body</code> for the target attribute will cause the <code>&lt;script&gt;</code> to be rendered as close to the closing body tag as possible.
h-outputscript-general-example-1=Script rendered inline
h-outputscript-general-example-2=Script rendered at the bottom of the page
h-outputscript-general-script-1=This `&lt;script&gt;` is rendered inline because the [vdldoc:h:outputScript:target] attribute is not specified. The drawback of inline scripts is that they block rendering of the rest of the page.
h-outputscript-general-script-2=This `&lt;script&gt;` is rendered immediately before the closing `&lt;/body&gt;` tag because [vdldoc:h:outputScript:target]=`body`. The benefit of rendering scripts before the closing `&lt;/body&gt;` tag is that they do not block rendering of the rest of the page.
h-outputscript-resource=A JavaScript resource can be added to the page by specifying the [vdldoc:h:outputScript:library] and [vdldoc:h:outputScript:name] attributes.
h-outputstylesheet=[javadoc:javax.faces.component.html.HtmlOutputStylesheet] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;style&gt;` element.
h-outputstylesheet-general=CSS classes can be specified *inline* or included from external *resource* files.
h-outputstylesheet-general-example-1=Specifying a CSS class inline
h-outputstylesheet-general-example-2=Specifying a CSS class from a JSF resource
h-outputtext=[javadoc:javax.faces.component.html.HtmlOutputText] is a [javadoc:javax.faces.component.UIOutput] component that renders its own value as text.
h-outputtext-general=The [vdldoc:h:outputText:value] attribute can be *bound* to a model bean property via EL.
h-outputtext-conversion=The [vdldoc:h:outputText:value] attribute can be *converted* by specifying an [vdldoc:f:converter] type of child tag.
h-outputtext-right-to-left=The component supports *Right-To-Left* language input by setting the [vdldoc:h:outputText:dir] and [vdldoc:h:outputText:lang] attributes.
h-panelgrid=[javadoc:javax.faces.component.html.HtmlPanelGrid] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;table&gt;` element to layout its children in a tabular grid.
h-panelgrid-general=The [vdldoc:h:panelGrid:columns] attribute specifies how many table columns are rendered. A new table row will be rendered if the number of children exceeds the number of columns.
h-panelgroup=[javadoc:javax.faces.component.html.HtmlPanelGroup] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;span&gt;` or a `&lt;div&gt;` element for grouping purposes.
h-panelgroup-general=The [vdldoc:h:panelGroup:layout] attribute specifies whether the component renders a `span` or a `div`.
h-panelgroup-general-example-1=By default, the component renders a `span`.
h-panelgroup-general-example-2=Specifying `block` for the [vdldoc:h:panelGroup:layout] attribute causes the component to render a `div`.
h-selectbooleancheckbox=[javadoc:javax.faces.component.html.HtmlSelectBooleanCheckbox] is a [javadoc:javax.faces.component.UISelectBoolean] component that renders a checkbox.
h-selectbooleancheckbox-general=The [vdldoc:h:selectBooleanCheckbox:value] of the component *must* be of type `boolean` or [javadoc:java.lang.Boolean].
h-selectbooleancheckbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
h-selectbooleancheckbox-immediate=When the [vdldoc:h:selectBooleanCheckbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-selectmanycheckbox=[javadoc:javax.faces.component.html.HtmlSelectManyCheckbox] is a [javadoc:javax.faces.component.UISelectMany] component that renders checkboxes and enables the user to select multiple values.
h-selectmanycheckbox-conversion=The [vdldoc:h:selectManyCheckbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
h-selectmanycheckbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
h-selectmanycheckbox-default-value=A *default value* can specified using when the [vdldoc:h:selectManyCheckbox:value] attribute is bound via EL to a model bean property.
h-selectmanycheckbox-general=The [vdldoc:h:selectManyCheckbox:value] attribute can be *bound* to a model bean property via EL.
h-selectmanycheckbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
h-selectmanycheckbox-vertical-layout=Setting the value of the [vdldoc:h:selectManyCheckbox:layout] attribute to `pageDirection` will cause the component to render with a *vertical layout*.
h-selectmanycheckbox-immediate=When the [vdldoc:h:selectManyCheckbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-selectmanylistbox=[javadoc:javax.faces.component.html.HtmlSelectManyListbox] is a [javadoc:javax.faces.component.UISelectMany] component that renders a `select` element and enables the user to select multiple values.
h-selectmanylistbox-conversion=The [vdldoc:h:selectManyListbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
h-selectmanylistbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
h-selectmanylistbox-default-value=A *default value* can specified using when the [vdldoc:h:selectManyListbox:value] attribute is bound via EL to a model bean property.
h-selectmanylistbox-general=The [vdldoc:h:selectManyListbox:value] attribute can be *bound* to a model bean property via EL, and the [vdldoc:h:selectManyListbox:size] can be specified.
h-selectmanylistbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
h-selectmanylistbox-immediate=When the [vdldoc:h:selectManyListbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-selectmanymenu=[javadoc:javax.faces.component.html.HtmlSelectManyMenu] is a [javadoc:javax.faces.component.UISelectMany] component that renders a `select` element and enables the user to select multiple values. *It has the same basic features of* [vdldoc:h:selectManyListbox] *except that there is no `size` attribute because JSF "select&#42;menu" components always render `size=1`*.
h-selectmanymenu-conversion=The [vdldoc:h:selectManyMenu:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
h-selectmanymenu-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
h-selectmanymenu-default-value=A *default value* can specified using when the [vdldoc:h:selectManyMenu:value] attribute is bound via EL to a model bean property.
h-selectmanymenu-general=The [vdldoc:h:selectManyMenu:value] attribute can be *bound* to a model bean property via EL.
h-selectmanymenu-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
h-selectmanymenu-immediate=When the [vdldoc:h:selectManyMenu:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-selectonelistbox=[javadoc:javax.faces.component.html.HtmlSelectOneListbox] is a [javadoc:javax.faces.component.UISelectOne] component that renders a `select` element (multi-item list) and enables the user to select one value.
h-selectonelistbox-conversion=The [vdldoc:h:selectOneListbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
h-selectonelistbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
h-selectonelistbox-default-value=A *default value* can specified using when the [vdldoc:h:selectOneListbox:value] attribute is bound via EL to a model bean property.
h-selectonelistbox-general=The [vdldoc:h:selectOneListbox:value] attribute can be *bound* to a model bean property via EL, and the [vdldoc:h:selectOneListbox:size] can be specified.
h-selectonelistbox-instant-ajax=The [vdldoc:h:selectOneListbox:value] attribute can be *bound* to a model bean property via EL.
h-selectonelistbox-immediate=The [vdldoc:h:selectOneListbox:value] attribute can be *bound* to a model bean property via EL.
h-selectonemenu=[javadoc:javax.faces.component.html.HtmlSelectOneMenu] is a [javadoc:javax.faces.component.UISelectOne] component that renders a `select` element (drop down list) and enables the user to select one value.
h-selectonemenu-conversion=The [vdldoc:h:selectOneMenu:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
h-selectonemenu-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
h-selectonemenu-default-value=A *default value* can specified using when the [vdldoc:h:selectOneMenu:value] attribute is bound via EL to a model bean property.
h-selectonemenu-general=The [vdldoc:h:selectOneMenu:value] attribute can be *bound* to a model bean property via EL.
h-selectonemenu-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
h-selectonemenu-immediate=When the [vdldoc:h:selectOneMenu:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-selectoneradio=[javadoc:javax.faces.component.html.HtmlSelectOneRadio] is a [javadoc:javax.faces.component.UISelectOne] component that renders radio buttons.
h-selectoneradio-conversion=The [vdldoc:h:selectOneRadio:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
h-selectoneradio-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
h-selectoneradio-default-value=A *default value* can specified using when the [vdldoc:h:selectOneRadio:value] attribute is bound via EL to a model bean property.
h-selectoneradio-general=The [vdldoc:h:selectOneRadio:value] attribute can be *bound* to a model bean property via EL.
h-selectoneradio-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
h-selectoneradio-immediate=When the [vdldoc:h:selectOneRadio:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
h-selectoneradio-vertical-layout=Setting the value of the [vdldoc:h:selectOneRadio:layout] attribute to `pageDirection` will cause the component to render with a *vertical layout*.
header=Header
header-text=Header Text
header-text-with-xml=Header Text <i>with xml</i>
hidden-field=Hidden Field
html5-passthrough=HTML5 Passthrough
hyperlink-targeting-the-showcase-portlet=Hyperlink targeting the Showcase portlet
immediate=Immediate
improve-this-example=Improve This Example
i-agree-to-the-terms-of-the-license-agreement=I agree to the terms of the license agreement
index=Index
in-store=In-Store
info=Info
input=Input
instant-ajax=Instant Ajax
invalid-selection=Invalid Selection
inverse=Inverse
item-1-label=Item 1
item-1-value=1
item-2-label=Item 2
item-2-value=2
item-3-label=Item 3
item-3-value=3
item-4-label=Item 4
item-4-value=4
jsf-showcase=JSF Showcase
jstl=JSTL
large=Large
last=Last
last-name=Last Name
lazy=Lazy
left=Left
like=Like
link=Link
link-to-a-map-of=Link to a map of
listener=Listener
locale-from-el=locale from EL
localization=Localization
lunchtime-is-not-valid=Lunchtime is not valid
max-length-events=Max Length Events
menu=Menu
message-styling=Message Styling
min-chars=Min Chars
min-max=Min/Max
mini=Mini
misc=Miscellaneous
modal=Modal
model-value=Model Value
more-info=More Info
multimedia=Multimedia
multiple=Multiple
multiple-instances=Multiple Instances
modules=Modules
multiple-panes=Multiple Panes
navigation=Navigation
next=Next
no-customers-selected=No Customers Selected
non-ajax=Non-Ajax
none=None
note=Note
note-chromium-issue-4579=Note: <a href="https://code.google.com/p/chromium/issues/detail?id=4579" target="_blank">Chromium Issue#4579</a> may cause this component to display *more than one* menu item.
online=Online
open-orders=Open Orders
output=Output
pagination=Pagination
panel=Panel
param=Param
parameter-value=Parameter Value
password=Password
pick=Pick
please-consider-using=Please consider using
please-choose-a-meeting-time-lunchtime-12-1-is-not-valid=Please choose a meeting time (Lunchtime from 12pm-1pm is not valid)
please-enter-a-value-between-x-and-x=Please enter a value between {0} and {1}
please-enter-between-x-and-x-characters=Please enter between {0} and {1} characters
please-enter-your-email=Please enter your email
please-visit-this-website-with-an-up-to-date-browser=Please visit this website with an up-to-date browser
position-mouse-cursor-here=Position mouse cursor here
primary=Primary
preview=Preview
previous=Previous
progress=Progress
purchases=Purchases
rating=Rating
redisplay=Redisplay
rendered=Rendered
rendered-bean-value-is=Rendered bean value is
request-a-day-off-weekdays-only=Request a day off (weekdays only)
request-a-new-example=Request a New Example
required=Required
required-message=This is a required field
reset=Reset
reset-progress=Reset Progress
resource=Resource
right=Right
right-to-left=Right-To-Left
rows-per-page=Rows Per Page
sat-and-sun-are-not-valid=Saturday and Sunday are not valid
search=Search
select=Select
selected-country-id=Selected Country Id
selected-country-name=Selected Country Name
selected-customers=Selected Customers
selection=Selection
selection-mode=Selection Mode
selected-tab=Selected Tab
server-events=Server Events
server-filter-type=Server Filter Type
size=Size
small=Small
sort-multiple-columns=Sort (Multiple Columns)
sort-single-column=Sort (Single Column)
source-code=Source Code
start-progress=Start Progress
stop-progress=Stop Progress
step-1=Step 1
step-2=Step 2
step-3=Step 3
step=Step
submit=Submit
submit-and-re-render-field=Submit and Re-Render Field
submit-and-re-render-form=Submit and Re-Render Form
submit-and-re-render-page=Submit and Re-Render Page
submit-non-faces-postback=Submit Non-Faces Postback
submit-search=Submit Search
success=Success
summary-position=Summary Position
text-field=Text Field
text-from-title-attribute=Text from title attribute
text-from-value-attribute=Text from value attribute
the-hidden-input-is-not-rendered=The hidden input is not rendered
this-is-a-div-that-contains-a-hidden-input=This is a div that contains a hidden input
this-is-column-1=This is column 1 with width="33"
this-is-column-2=This is column 2 with width="33"
this-is-column-3=This is column 3 with width="33"
this-is-some-popover-text=This is some popover text
this-text-is-a-date-with-ddmmYYYY-format=This text should be in dd/MM/yyyy format
this-text-is-a-number-with-2-max-fraction-digits=This number should have as much as 2 fraction digits
this-text-is-inside-a-span-html-tag=This text is inside a <span> HTML tag
this-text-is-inside-a-div-html-tag=This text is inside a <div> HTML tag
this-text-comes-from-a-template=This text comes from a template
this-text-will-be-rendered=This text will be rendered
this-text-will-not-be-rendered=This text won't be rendered
time=Time
time-pattern=Time Pattern
text-for-a-link=Text for a link
text-box-1=Text Box #1
text-box-2=Text Box #2
text-verification-code=Text Verification Code
to-param-page=To Param page
tooltip-value=Tooltip Value
top=Top
ui-component=For adding a [javadoc:javax.faces.UIComponent] in a JSF component tree, use [vdldoc:ui:component].
ui-component-general=Notice that any elements outside this tag won't be rendered
ui-composition=Same as [vdldoc:ui:component], [vdldoc:ui:composition] can add content to a Facelet page, but, as opposite to ui:component, it won't be added to the component tree.
ui-composition-general=Additionally, it's possible to reuse other Facelet pages using `template` attribute.
ui-debug=Use [vdldoc:ui:debug] for getting information about components tree and scoped variables.
ui-debug-general=By default, in every JSF page where this tag is located, you can press  `Ctrl + Alt + d`. For changing the latest key, just use `hotkey` attribute.
ui-decorate=Very similar to [vdldoc:ui:composition], [vdldoc:ui:decorate] Facelet can add content to the current JSF page, but will add all the external elements to it (just the opposite as [vdldoc:ui:composition] does).
ui-decorate-general=For templating reusing, you can use `template` attribute pointing to a JSF page.
ui-define=[vdldoc:ui:define] can create sections inside a template that is using any of [vdldoc:ui:component], [vdldoc:ui:composition], [vdldoc:ui:decorate] or [vdldoc:ui:fragment].
ui-define-general=To define names for each section, it's mandatory to use `name` attribute. For inserting content into these sections, use [vdldoc:ui:insert].
ui-fragment=This component has many similarities comparing to [vdldoc:ui:component]. Use [vdldoc:ui:fragment] if you want to render any content and the surrounding content too (unlike in [vdldoc:ui:component]). 
ui-fragment-general=
ui-include=[vdldoc:ui:include] has a similar behavior from [vdldoc:ui:decorate], but in this case the tools provided by templating sections ([vdldoc:ui:define] and [vdldoc:ui:insert]) won't work.
ui-include-general=
ui-insert=[vdldoc:ui:insert] tag is used for creating a section inside a template that will be used by other pages through [vdldoc:ui:define].
ui-insert-general=
ui-param=With [vdldoc:ui:param] it's possible to send some named parameters to templates used by [vdldoc:ui:include], [vdldoc:ui:composition] or [vdldoc:ui:decorate].
ui-param-general=As an example, you can use those parameters using EL expressions as its identifier.
ui-remove=One of the common things during development is to comment code in the Facelets files. But, if using the XML comment characters `&lt;!-- --&gt;` these markup will be rendered in the generated markup as a commented code, leaking some information to public that may not be noticed by developers. For avoiding these issues, you can use [vdldoc:ui:remove] nesting all those markup you want to be ignored completely.
ui-remove-general=
ui-repeat=[vdldoc:ui:repeat] iterates through  a [javadoc:java.util.List], `array`, [javadoc:javax.sql.ResultSet] or a single `Object`, encoding the children nested elements for each iteration. For these iterations you can use `var` attribute as the name of an scoped object that will be available for use.
ui-repeat-general=Use `size` if you want to delimit the number of iterations (should be less or equal from the total `value` elements), or `step` to only process those elements after the latest processed one. There is an interesting request variable that can be set in `varStatus` with some internal data about each iteration.
unexpected-validation-error-ocurred=An unexpected validation error has ocurred.
usage=Usage
user=User
valid-date-range=Valid Date Range
valid-time-range=Valid Time Range
validate-email-label=Email field
validating-an-email-address-using-validator-attribute=Validating an *email address* using the [vdldoc:h:inputTextarea:validator] attribute
validating-an-email-address-using-f-validateregex=Validating an *email address* using an [vdldoc:f:validateRegex] child tag
validation=Validation
validator-message=Invalid E-Mail Address
value-attribute=Value Attribute
value-of-foo-param=Value of foo Param
valuechangelistener-execution-when-immediate-is-false=ValueChangeListener execution when [vdldoc:h:selectOneRadio:immediate] is `false` (the default)
valuechangelistener-execution-when-immediate-is-true=ValueChangeListener execution when [vdldoc:h:selectOneRadio:immediate] is `true`
various-styles=Various Styles
vdl-documentation=VDL Documentation
view-params=View Params
save=Save
show-modal=Show Modal
show-selected-customers-as-feedback=Show Selected Customers as Feedback
show-selected-customers-in-modal-dialog=Show Selected Customers in Modal Dialog
util-facesrequestcontext=[javadoc:com.liferay.faces.util.context.FacesRequestContext] is a ThreadLocal singleton like FacesContext which can be called on the server to add scripts on the client.
util-facesrequestcontext-general=A *script* can be added to the response via [javadoc:com.liferay.faces.util.context.FacesRequestContext#addScript(java.lang.String)]. The script will be written out at the bottom of the page (or in the `&lt;eval&gt;` section in a partial response) in the response of the current request.
vertical=Vertical
vertical-layout=Vertical Layout
warning=Warning
when-was-the-us-declaration-of-independence-signed=When was the US Declaration of Independence signed?
which-of-the-following-dates-are-in-the-18th-century=Which of the following dates are in the 18th century?
without-button=Without Button
wizard=Wizard